version: '3.8'

services:
  redis:
    image: redis:latest
    container_name: redis-server
    ports:
      - "6379:6379"
    networks:
      - app-network

  rabbitmq:
    image: "rabbitmq:management"
    ports:
      - "5672:5672"   # RabbitMQ message broker
      - "15672:15672"  # RabbitMQ management UI
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
    # Optional: If you want the RabbitMQ Management UI, go to http://localhost:15672
    # Default credentials: user / password
    networks:
      - app-network

  # celery:
  #   image: celery/celery:latest
  #   container_name: celery-worker
  #   environment:
  #     - CELERY_BROKER_URL=redis://redis:6379/0
  #     - CELERY_RESULT_BACKEND=redis://redis:6379/0
  #   command: celery -A tasks worker --loglevel=info
  #   depends_on:
  #     - redis
  #   networks:
  #     - app-network

  # api:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.api
  #   container_name: python-api
  #   ports:
  #     - "5000:5000"
  #   environment:
  #     - CELERY_BROKER_URL=redis://redis:6379/0
  #     - RESULT_BACKEND=redis://redis:6379/0
  #     - BROKER_CONNECTION_RETRY_ON_STARTUP=True
  #     - FLASK_ENV=development  # Enable hot reloading
  #   volumes:
  #     - ./src/api:/app/api  # Mount for development
  #     - ./data/downloads:/app/data/downloads
  #   depends_on:
  #     - redis
  #   networks:
  #     - app-network

  # frontend:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.frontend
  #   container_name: vite-frontend
  #   ports:
  #     - "3000:80"
  #   depends_on:
  #     - api
  #   networks:
  #     - app-network

volumes:
  redis-data:

networks:
  app-network:
    driver: bridge
